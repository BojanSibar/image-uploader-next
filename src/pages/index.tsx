import Head from "next/head";
import { Inter } from "next/font/google";
import React, { useEffect } from "react";
import useImageData from "@/hooks/useImageData";
import SiteLayout from "@/components/SiteLayout";
import { CreateImageDB } from "@/helpers/image-repo";
import ImageGrid from "@/components/ImageGrid";
import UploadButton from "@/components/UploadButton";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [state, dispatch] = useImageData<CreateImageDB>();

  useEffect(() => {
    const controller = new AbortController();
    const signal = controller.signal;

    (async () => {
      const res = await fetch("/api/imageUploader/read", {
        signal,
      });
      const data = await res.json();
      dispatch({ type: "addInitImages", payload: data.data });
    })();

    return () => controller.abort();
  }, [dispatch]);

  const handleUpload = async (file: File) => {
    try {
      const formData = new FormData();
      formData.append("media", file);
      const response = await fetch("/api/imageUploader/upload", {
        method: "POST",
        body: formData,
      });
      const content = await response.json();
      dispatch({ type: "addNewImage", payload: content.data });
    } catch (error) {
      console.log(error);
    }
  };

  const onInputChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = e.currentTarget;
    console.log(value);
  };

  const onRemove = (val: string) => {
    dispatch({ type: "deleteImage", payload: val });
  };
  return (
    <>
      <Head>
        <title>Image uploader</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SiteLayout
        searchNode={
          <input
            type="text"
            placeholder="Search Images"
            onChange={onInputChangeHandler}
          />
        }
        fileUploadNode={<UploadButton handleUpload={handleUpload} />}
        imagesNode={
          <ImageGrid
            imageData={state.imagesData}
            imagePaths={state.images}
            onRemove={onRemove}
          />
        }
      />
    </>
  );
}
